#
# Comet 1 standard library command
# Filename: src\\bin\\history.py
# Copyright (c) 2025, Infinite Inc.
# Written by Thiruvalluvan Kamaraj
# Licensed under the Apache-2.0 License.
#

import os
import sys
import subprocess as sp
import typing     as ty

# Add src\\core to sys.path
srcDir = os.path.dirname(os.path.dirname(__file__))
sys.path.insert(1, os.path.join(srcDir, "core"))
import commons as comm
sys.path.pop(1)

helpStr = (
    b"x\x9cs\xc9,.\xc8I\xac,V(\xc9HU\xc8\xc8,.\xc9/\xaaT\xc8O\x03s\x0b\x8a\xf2"
    b"\xd3\x8b\x12s\xf5\xb8\xb8B\x83\x1d\xdd]\xad\xe0\xf2\xd1\xba\x19\xb1\\\\"
    b"\xfe\x01!\x9e\xfe~\x1a\xc1\x9a\\\xba\x19\n\xfa\n\xba\xba\x19\xa99\x05\\"
    b"\x9c\x1e@R!7\xb5\xb881=\x15\x00\xde\x19\x1e\x1e"
)
history = (
    b"x\x9cmU\xcb\x8e\xd4:\x10\xdd\xf3\x15%63H!\xf3\x04\x89\xbb\xbb\x1a\t\x89"
    b"\xdd\x95.k\x84\xe3T:\x06\xc76~\xa4\xa7\xff\x9eSN\xd2\x9d\x19\xd8t:v=\xce"
    b"9\xf5\xc8\xd7\x91\xe9\x7f\xd6\xde\xf5d\\\xe6\x18\"\xe3\x97\x8e*\xd11\x9a"
    b"\x9c\xd9Qw\xa2\xa7\xffNy\xf4\xce\xa4\x0c+\xb2*3\xdd\xdf\xde\xdf\xb6o\xde"
    b"|\x85\xff`\xa2\\L\xc1\xf2\xc4.\xabl\xbc#?P\xc6\xdd\xeb\xa03\xc7\x13u*\x19"
    b"\xddPW2i_lO\xceg\xea\x18/.\x1bW\xb8\'X\xaaA|bq\xce\xb8C\x8du\x95\xcd\xc4W"
    b"\xb0\x9a&\x05\xbc\xd7\xc7\xd1\xe8\x91\x0effX\x93\xc5\x93\xb4\xf5\xfa\'"
    b"\xa9\x8dM,!\x8b\xb7\xc9t4y\xa4oOt\xac\tS\xf6\xa1\xc6\xac\x0e\xef\x9a?\xb1"
    b"V3\x1dU\x1a\xc9\x0c\xd5\x11\x98\"\x07\x06\xf9\x9e`\x95\x12\x9e>\x92\x87k"
    b"\xa4\x14X\x9b\xc1hR:\x9b\xd9d\xc3iU\x07\x07E\xd9U$\xd0OP\xa7Y5\x7f\x7f"
    b"\xd7\xde65\xf2+\rY\x08\x88\xc6w\xed\xce\x94F\xd5\x13?\xe7\x08\x1b\xbb\xca"
    b"HA!$8\xaa\xce\xd8\x9a\xb7\xa9\xfc\x17a\xbd\x83\x9dq\x01J\xabM\xb8J\xd6"
    b"\xd1\x81se\xad\xe2\xa1H\xca$\x19\x15%F@)\xf0\xe2\x15\xa2\x9fBn(y\x11Q\xf2"
    b"O\xc5f\x03\x98\xeb\x15\xa0\x8b\x08\x8e\xb7\xf0\xa0\xbd\"\xbe\x07\xe2\xc1["
    b"\xeb\x8f\xa0S\xf5\x97|IM\\A\x8b\xcar\xa8\xfa\x1e\xf7\x03\x84-P\x95\xae"
    b"\x1d\x1f\xb7X\xe9\x1de\xff\xba6\x97\x04\x0fH \xe2M\xaa\xe7U\xaf\x87J^p*G%"
    b"\x1c\xa2\x92\xe0k\xff\xbe\xa8\xf0\xfb\xad\x18\xf4\xd0~j?n:\xd3\xc3\xa2"
    b"\xb2\xf3q\xf2%A>\xd5\xcf\xcai)\xfa\xaa4\xc0\xe1/\x0eVl\x088\x1b\xd8R>\xfa"
    b"-hj\xe9_kw\xe2\n,\x1fd4\x12i`C\xbbK\x9d%\x0c \x9c\x85\xb1\xc6\xf12\x19"
    b"\xac\xd0\xdc\x9b\xff\xce}m\xc4_\xc5\xac\x10F\x85\xc6\xffU|\x961\x88\xbe"
    b"\xc0\x12\xe1\xa6\xa5\rj\x03Hu\xf2)\xb0\x0ce5\xa4t\x9a:o7 %-\xfd\x86\xea"
    b"\x83\x9f\xfdK)\x1f\xffT\xfa\xf1\xac\xd8#\xe0L~\xe6\x9a\x97\x1cK5\xd1\x13"
    b"\x0b\xa4\xfd\x98W0\x81#n\'\xb0\xe1\xa8\x16=\xcc\xb2+6\x07\xbcVD\xd7H\xa4U"
    b"\x02\xad#tZ\xae\xfb\xbd\xa4q\xc9\xc6hiI\xc8\xcfJ\xe6\x07\x03%\xfd\xad\xa8"
    b"\x87B:{,\x1c\'\xd2\x8e\xc0\x9f\x82\xd2\x8c\xae\xaa\x01\xa1\xc6\x99\xb1"
    b"\xc8s\xa1\xfba\x1b\xcb\x97|\xbf\xe4\x1adR?\x90mm\xae$%8\xcf\xa0\x93\xd5"
    b"\xe0g#\xe7\x83\x8a4y\xe4\t\x18\x808\x14[\xaf\x07\xcb\xcf\xa6\xbbh\x0cLE\n"
    b"\r:2)\x12eV\xd1(1qe\xea\xd0\xa9\x82\xf3L\x1a\xd9\xd4\xae>OV6\xd4]\x05\x9b"
    b"\xb2\x8a\x97\xcd\xf1\xd8\xd0\x8f\x82\x9d\xb2\xec\xd1\x0b\xb1\x05\x85\xc12"
    b"\x1f\xcf\xb6\x1f*\xb7u\x04\xfb\xba\x05\xd0\xc7\xd8Z\xfbYl\x96q=DY\x81\xf1"
    b"o{\xa7\xe3\xe5@\xf4\\D\xe1\x9a\x8d\x9fY\x97\xbc\xa3l\\\x82D\x97\xf7kk~2"
    b"\xbde=z\xba\xfan\xd3\xf7\xab\xb7\xd8\xc9X\x0c\x12\xef\xbc\x19\xa4\xc6\xc1"
    b"\x04\x9c5\xe8\xb8\xa5\xba2\x10\x92b\xfbN\x9c\xb7\xd3.\xd7\xcb\xe9\x82h"
    b"\x9f\xfdZ\x19\xe3\xa4\x15k\x176\x04/4\x1b\xcd&a\xd3\xc9\\\xe5\x1c\xfe\xb9"
    b"\xb9\xd1a\xfb\xf6\xb5\x07\xf0/]k\xfc\x8d\x16\xd9\xdb1O\xb6\xfd\r\\o\x91="
)


def HISTORY(varTable: dict[str, str], origPth: str, prevErr: int, cmd: str,
            args: dict[int, str], opts: dict[int, str], fullCmd: str,
            stream: ty.TextIO, op: str, debug: bool) -> int:
    """
    Displays the history of the program.
    > param varTable: Variable table
    > param origPth: Path to the interpreter
    > param prevErr: Previous error code
    > param command: Name of the command
    > param args: Dictionary of arguments
    > param opts: Dictionary of options
    > param fullComm: Full command
    > param stream: Original STDOUT
    > param op: Operation next in line to be performed
    > param debug: Is debugging enabled?
    > return: Error code (ref. src\\errCodes.txt)
    """
    copy      = False
    optVals   = comm.LOWERLT(opts.values())
    validOpts = {'c', 'h', "-copy", "-help"}

    if opts:
        if tmp := (set(optVals) - validOpts):
            comm.ERR(f"Unknown option(s): {comm.OPTSJOIN(tmp)}")
            return comm.ERR_UNKNOPTS
        if 'h' in optVals or "-help" in optVals:
            helpStrTmp = comm.DECOMPSTR(helpStr)
            if isinstance(helpStrTmp, int):
                  return comm.ERR_INVHELPSTRTYPE
            print(helpStrTmp)
            return comm.ERR_SUCCESS
        for opt in optVals:
            if opt in ('c', '-copy'):
                copy = True

    if args:
        comm.ERR("Incorrect format")
        return comm.ERR_INCFORMAT

    print(tmp2 := comm.DECOMPSTR(history))
    if copy:
        sp.run(["clip.exe"], input=tmp2.encode("utf-8"), check=True)

    return comm.ERR_SUCCESS
